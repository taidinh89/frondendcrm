import { useState, useEffect } from 'react';
import axios from 'axios';

export const useApiData = (endpoint, params = {}) => {
    const [data, setData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [pagination, setPagination] = useState(null);
    const [trigger, setTrigger] = useState(0);

    const refetch = () => setTrigger(t => t + 1);

    // Chuy·ªÉn object params th√†nh chu·ªói ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi m·ªôt c√°ch ƒë√°ng tin c·∫≠y
    const stringifiedParams = JSON.stringify(params);

    useEffect(() => {
        // N·∫øu kh√¥ng c√≥ endpoint, kh√¥ng l√†m g√¨ c·∫£
        if (!endpoint) {
             setData([]);
             setIsLoading(false);
             return;
        }

        const fetchData = async () => {
            setIsLoading(true);
            setError(null);
            console.log(`üöÄ [API Request] G·ª≠i ƒëi:`, { endpoint, params });
            try {
                // S·ª≠a l·ªói: Lu√¥n s·ª≠ d·ª•ng object `params` ƒë∆∞·ª£c truy·ªÅn v√†o
                const response = await axios.get(endpoint, { params });
                
                console.log(`‚úÖ [API Response] Nh·∫≠n v·ªÅ t·ª´ ${endpoint}:`, response.data);
                setData(response.data.data || []);
                
                // X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p c√≥ ph√¢n trang v√† kh√¥ng c√≥
                if (response.data.meta && response.data.links) {
                    setPagination(response.data.meta);
                } else {
                    setPagination(null);
                }
            } catch (err) {
                console.error(`‚ùå [API Error] L·ªói t·ª´ ${endpoint}:`, err.response || err);
                setError(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. L·ªói: ${err.response?.data?.message || err.message}`);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
        // Effect n√†y s·∫Ω ch·∫°y l·∫°i m·ªói khi endpoint, params, ho·∫∑c trigger thay ƒë·ªïi
    }, [endpoint, stringifiedParams, trigger]);

    return { data, isLoading, error, pagination, fetchData: refetch };
};